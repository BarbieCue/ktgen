package org.example

import kotlinx.serialization.Serializable
import kotlinx.serialization.encodeToString
import kotlinx.serialization.serializer
import nl.adaptivity.xmlutil.core.XmlVersion
import nl.adaptivity.xmlutil.serialization.*
import org.w3c.dom.Document
import org.xml.sax.InputSource
import java.io.File
import java.io.StringReader
import java.io.StringWriter
import java.io.Writer
import java.util.*
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.OutputKeys
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult


/*
 Keyboard
 */

@Serializable
@XmlSerialName("char", "", "")
data class Char (
    val modifier: String? = null,
    val position: String = "",
    @XmlValue(true)
    val text: String = ""
)

@Serializable
@XmlSerialName("key", "", "")
data class Key (
    val chars: List<Char> = emptyList(),
    val height: Int = 0,
    val fingerIndex: Int = 0,
    val top: Int = 0,
    val width: Int = 0,
    val left: Int = 0,
    val hasHapticMarker: Boolean? = null,
)

@Serializable
@XmlSerialName("specialKey", "", "")
data class SpecialKey (
    val height: Int = 0,
    val type: String = "",
    val top: Int = 0,
    val width: Int = 0,
    val left: Int = 0,
    val modifierId: String? = null,
    val label: String? = null
)

@Serializable
@XmlSerialName("keys", "", "")
data class Keys (
    @XmlElement(true)
    val keys: List<Key> = emptyList(),
    @XmlElement(true)
    val specialKeys: List<SpecialKey> = emptyList()
)

@Serializable
@XmlSerialName("keyboardLayout", "", "")
data class KeyboardLayout (
    @XmlElement(true)
    val id: String = "",
    @XmlElement(true)
    val title: String = "",
    @XmlElement(true)
    val name: String = "",
    @XmlElement(true)
    val width: Int = 0,
    @XmlElement(true)
    val height: Int = 0,
    @XmlElement(true)
    val keys: Keys = Keys()
) {
    companion object {
        fun create(path: String): KeyboardLayout? = try {
            val rawXml = File(path).readText().trim()
            val xml = XML {
                xmlVersion = XmlVersion.XML10
            }
            val serializer = serializer<KeyboardLayout>()
            xml.decodeFromString(serializer, rawXml)
        } catch (e: Exception) {
            System.err.println("Error on reading keyboard ${e.message}")
            null
        }
    }
}


/*
 Course
 */

fun Course.toXml(): String {
    val xml = XML {
        xmlVersion = XmlVersion.XML10
    }
    return prettyPrint(xml.encodeToString(this))
}

@Serializable
@XmlSerialName("course", "", "")
data class Course (
    @XmlElement(true)
    val id: String = UUID.randomUUID().toString(),
    @XmlElement(true)
    val title: String = "Generated by ktgen",
    @XmlElement(true)
    val description: String = "Visit ktgen on Github (https://github.com/BarbieCue/ktgen)",
    @XmlElement(true)
    val keyboardLayout: String = "",
    @XmlChildrenName("lesson", "", "")
    val lessons: List<Lesson> = emptyList()
)

@Serializable
@XmlSerialName("lesson", "", "")
data class Lesson (
    @XmlElement(true)
    val id: String = UUID.randomUUID().toString(),
    @XmlElement(true)
    val title: String = "",
    @XmlElement(true)
    val newCharacters: String = "",
    @XmlElement(true)
    val text: String = "",
)

fun prettyPrint(xmlString: String): String {
    return try {
        val src = InputSource(StringReader(xmlString))
        val document: Document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(src)
        val transformerFactory: TransformerFactory = TransformerFactory.newInstance()
        val transformer: Transformer = transformerFactory.newTransformer()
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8")
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no")
        transformer.setOutputProperty(OutputKeys.INDENT, "yes")
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2")
        val out: Writer = StringWriter()
        transformer.transform(DOMSource(document), StreamResult(out))
        out.toString().trim()
    } catch (e: Exception) {
        System.err.println("Error on pretty-printing xml")
        System.err.println(xmlString)
        System.err.println(e.message)
        System.err.println("Proceeding with non-pretty xml (possibly erroneous)")
        xmlString
    }
}