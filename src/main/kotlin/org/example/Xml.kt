package org.example

import kotlinx.serialization.Serializable
import kotlinx.serialization.encodeToString
import nl.adaptivity.xmlutil.core.XmlVersion
import nl.adaptivity.xmlutil.serialization.*
import org.w3c.dom.Document
import org.xml.sax.InputSource
import java.io.StringReader
import java.io.StringWriter
import java.io.Writer
import java.util.*
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.OutputKeys
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult


/*
 Course
 */

fun Course.toXml(): String {
    val xml = XML {
        xmlVersion = XmlVersion.XML10
    }
    return prettyPrint(xml.encodeToString(this))
}

@Serializable
@XmlSerialName("course", "", "")
data class Course (
    @XmlElement(true)
    val id: String = UUID.randomUUID().toString(),
    @XmlElement(true)
    val title: String = "Generated by ktgen",
    @XmlElement(true)
    val description: String = "",
    @XmlElement(true)
    val keyboardLayout: String = "",
    @XmlChildrenName("lesson", "", "")
    val lessons: List<Lesson>
)

@Serializable
@XmlSerialName("lesson", "", "")
data class Lesson (
    @XmlElement(true)
    val id: String = UUID.randomUUID().toString(),
    @XmlElement(true)
    val title: String,
    @XmlElement(true)
    val newCharacters: String,
    @XmlElement(true)
    val text: String,
)

fun prettyPrint(xmlString: String): String {
    return try {
        val src = InputSource(StringReader(xmlString))
        val document: Document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(src)
        val transformerFactory: TransformerFactory = TransformerFactory.newInstance()
        val transformer: Transformer = transformerFactory.newTransformer()
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8")
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no")
        transformer.setOutputProperty(OutputKeys.INDENT, "yes")
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
        val out: Writer = StringWriter()
        transformer.transform(DOMSource(document), StreamResult(out))
        out.toString().trim()
    } catch (e: Exception) {
        println("Error on pretty-printing xml")
        println(xmlString)
        println(e.message)
        println("Proceeding with non-pretty xml (possibly erroneous)")
        xmlString
    }
}