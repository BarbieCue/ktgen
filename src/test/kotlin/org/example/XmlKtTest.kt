package org.example

import io.kotest.matchers.shouldBe
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
import javax.xml.validation.Validator

class XmlKtTest : ConcurrentExpectSpec({

    context("Course") {

        context("toXml") {

            expect("creates an xml representation of the course as string") {
                Course(id = "196dc484-8148-4c6d-9700-e34d06f06a40",
                    lessons = listOf(Lesson(
                        id = "342e8f50-d967-4f92-ab37-ea6ecd6c58cd",
                        title = "abc",
                        newCharacters = "cg",
                        text = "..."))).toXml() shouldBe """
                    <?xml version="1.0" encoding="UTF-8"?><course>
                      <id>196dc484-8148-4c6d-9700-e34d06f06a40</id>
                      <title>Generated by ktgen</title>
                      <description>Visit ktgen on Github (https://github.com/BarbieCue/ktgen)</description>
                      <keyboardLayout/>
                      <lessons>
                        <lesson>
                          <id>342e8f50-d967-4f92-ab37-ea6ecd6c58cd</id>
                          <title>abc</title>
                          <newCharacters>cg</newCharacters>
                          <text>...</text>
                        </lesson>
                      </lessons>
                    </course>
                """.trimIndent()
            }

            expect("xml string is ktouch course xml schema compliant") {
                val xmlString = Course(id = "196dc484-8148-4c6d-9700-e34d06f06a40",
                    lessons = listOf(Lesson(
                        id = "342e8f50-d967-4f92-ab37-ea6ecd6c58cd",
                        title = "abc",
                        newCharacters = "cg",
                        text = "..."))).toXml()
                xmlString.validateAgainstXSD(ktouchCourseXsd) shouldBe true
            }
        }
    }

    context("prettyPrint") {

        expect("pretty prints a course xml string") {
            val xml = "<course><id>9a423d1e-748f-4f43-9e53-5324fa064501</id><title>Generated by ktgen</title><description></description><keyboardLayout></keyboardLayout><lessons><lesson><id>e61f4cc5-6d92-44eb-adff-0d20ed4e4795</id><title>1: en</title><newCharacters>en</newCharacters><text>abc</text></lesson></lessons></course>"
            prettyPrint(xml) shouldBe """
            <?xml version="1.0" encoding="UTF-8"?><course>
              <id>9a423d1e-748f-4f43-9e53-5324fa064501</id>
              <title>Generated by ktgen</title>
              <description/>
              <keyboardLayout/>
              <lessons>
                <lesson>
                  <id>e61f4cc5-6d92-44eb-adff-0d20ed4e4795</id>
                  <title>1: en</title>
                  <newCharacters>en</newCharacters>
                  <text>abc</text>
                </lesson>
              </lessons>
            </course>
        """.trimIndent()
        }

        expect("return the original input when an error occurs") {
            val nonPrettyMalformedXml = ": - (  <course><id>9a423d1e-748f-4f43-9e53-5324fa064501</id><title>Generated by ktgen</title><description></description><keyboardLayout></keyboardLayout><lessons><lesson><id>e61f4cc5-6d92-44eb-adff-0d20ed4e4795</id><title>1: en</title><newCharacters>en</newCharacters><text>abc</text></lesson></lessons></course>"
            prettyPrint(nonPrettyMalformedXml) shouldBe nonPrettyMalformedXml
        }

        expect("empty input leads to empty output") {
            prettyPrint("") shouldBe ""
        }
    }
})


private fun String.validateAgainstXSD(xsd: String): Boolean {
    return try {
        val factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI)
        val schema = factory.newSchema(StreamSource(xsd.byteInputStream()))
        val validator: Validator = schema.newValidator()
        validator.validate(StreamSource(byteInputStream()))
        true
    } catch (ex: java.lang.Exception) {
        false
    }
}

// https://github.com/KDE/ktouch/blob/master/src/schemata/course.xsd
private val ktouchCourseXsd = """
    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

      <xs:element name="course">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="id" type="xs:string" />
            <xs:element name="title" type="xs:string" />
            <xs:element name="description" type="xs:string" />
            <xs:element name="keyboardLayout" type="xs:string" />
            <xs:element name="lessons" type="lessonList" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      
      <xs:complexType name="lessonList">
        <xs:sequence>
          <xs:element name="lesson" type="lesson" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
      </xs:complexType>
      
      <xs:complexType name="lesson">
        <xs:sequence>
            <xs:element name="id" type="xs:string" />
            <xs:element name="title" type="xs:string" />
            <xs:element name="newCharacters" type="xs:string" />
            <xs:element name="text" type="xs:string" />
        </xs:sequence>
      </xs:complexType>

    <!--
    kate: space-indent on; indent-width 2; mixedindent off; indent-mode xml;
    -->

    </xs:schema>
""".trimIndent()