package org.example

import io.kotest.matchers.shouldBe
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestInstance
import java.io.File
import java.nio.file.Files
import java.nio.file.attribute.PosixFilePermissions
import java.util.*
import kotlin.io.path.Path

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class CourseKtTest {

    private val files = mutableListOf<String>()

    @AfterAll
    fun deleteFiles() {
        files.forEach { File(it).delete() }
    }

    @Test
    fun `readCourseSymbols happy`() {
        val filename = "ktgen_course_definition_test${UUID.randomUUID()}"
        files.add(filename)
        File(filename).writeText("apple\npear\ngrape")
        readCourseSymbols(filename) shouldBe listOf("apple", "pear", "grape")
    }

    @Test
    fun `readCourseSymbols file not exists`() {
        readCourseSymbols("a_non_existing_file") shouldBe emptyList()
    }

    @Test
    fun `readCourseSymbols empty path`() {
        readCourseSymbols("") shouldBe emptyList()
    }

    @Test
    fun `readCourseSymbols file empty`() {
        val filename = "ktgen_course_definition_test${UUID.randomUUID()}"
        files.add(filename)
        File(filename).writeText("")
        readCourseSymbols(filename) shouldBe emptyList()
    }

    @Test
    fun `writeCourseFile empty path`() {
        writeCourseFile("", Course(lessons = emptyList())) shouldBe false
    }

    @Test
    fun `writeCourseFile relative path`() {
        val filename = "my_test_course${UUID.randomUUID()}.xml"
        files.add(filename)
        writeCourseFile(filename, Course(lessons = emptyList())) shouldBe true
        File(filename).exists() shouldBe true
    }

    @Test
    fun `writeCourseFile cannot write file`() {
        val readOnlyDir = "dir${UUID.randomUUID()}"
        val filename = "my_test_course${UUID.randomUUID()}.xml"
        files.add("$readOnlyDir/$filename")
        files.add(readOnlyDir)

        File(readOnlyDir).mkdir()
        val readOnly = PosixFilePermissions.fromString("r--r--r--")
        Files.setPosixFilePermissions(Path(readOnlyDir), readOnly)

        writeCourseFile("$readOnlyDir/$filename", Course(lessons = emptyList())) shouldBe false
        File("$readOnlyDir/$filename").exists() shouldBe false
    }

    @Test
    fun `Course toXml happy`() {
        Course(id = "196dc484-8148-4c6d-9700-e34d06f06a40",
            lessons = listOf(Lesson(
                id = "342e8f50-d967-4f92-ab37-ea6ecd6c58cd",
                title = "abc",
                newCharacters = "cg",
                text = "..."))).toXml() shouldBe """
            <?xml version="1.0" encoding="UTF-8"?><course>
              <id>196dc484-8148-4c6d-9700-e34d06f06a40</id>
              <title>Generated by ktgen</title>
              <description/>
              <keyboardLayout/>
              <lessons>
                <lesson>
                  <id>342e8f50-d967-4f92-ab37-ea6ecd6c58cd</id>
                  <title>abc</title>
                  <newCharacters>cg</newCharacters>
                  <text>...</text>
                </lesson>
              </lessons>
            </course>
        """.trimIndent()
    }
}